// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// The realtime protocol for the template match engine.
package api;

option go_package = "github.com/heroiclabs/nakama-project-template/api";

// The marks available in the game.
enum Mark {
    // No mark specified. Unused.
    MARK_UNSPECIFIED = 0;
    // X (Cross).
    MARK_X = 1;
    // O (Nought).
    MARK_O = 2;
}

// The complete set of opcodes used for communication between clients and server.
enum OpCode {
    // No opcode specified. Unused.
    OPCODE_UNSPECIFIED = 0;
    // New game round starting.
    OPCODE_START = 1;
    // Update to the state of an ongoing round.
    OPCODE_UPDATE = 2;
    // A game round has just completed.
    OPCODE_DONE = 3;
    // A move the player wishes to make and sends to the server.
    OPCODE_MOVE = 4;
    // Move was rejected.
    OPCODE_REJECTED = 5;
}

// Message data sent by server to clients representing a new game round starting.
message Start {
    // The current state of the board.
    repeated Mark board = 1;
    // The assignments of the marks to players for this round.
    map<string, Mark> marks = 2;
    // Whose turn it is to play.
    Mark mark = 3;
    // The deadline time by which the player must submit their move, or forfeit.
    int64 deadline = 4;
}

// A game state update sent by the server to clients.
message Update {
    // The current state of the board.
    repeated Mark board = 1;
    // Whose turn it is to play.
    Mark mark = 2;
    // The deadline time by which the player must submit their move, or forfeit.
    int64 deadline = 3;
}

// Complete game round with winner announcement.
message Done {
    // The final state of the board.
    repeated Mark board = 1;
    // The winner of the game, if any. Unspecified if it's a draw.
    Mark winner = 2;
    // Winner board positions, if any. Used to display the row, column, or diagonal that won the game.
    // May be empty if it's a draw or the winner is by forfeit.
    repeated int32 winner_positions = 3;
    // Next round start time.
    int64 next_game_start = 4;
}

// A player intends to make a move.
message Move {
    // The position the player wants to place their mark in.
    int32 position = 1;
}

// Payload for an RPC request to find a match.
message RpcFindMatchRequest {
    // User can choose a fast or normal speed match.
    bool fast = 1;
}

// Payload for an RPC response containing match IDs the user can join.
message RpcFindMatchResponse {
    // One or more matches that fit the user's request.
    repeated string match_ids = 1;
}
