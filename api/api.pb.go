// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

// The realtime protocol for the template match engine.

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The marks available in the game.
type Mark int32

const (
	// No mark specified. Unused.
	Mark_MARK_UNSPECIFIED Mark = 0
	// X (Cross).
	Mark_MARK_X Mark = 1
	// O (Nought).
	Mark_MARK_O Mark = 2
)

var Mark_name = map[int32]string{
	0: "MARK_UNSPECIFIED",
	1: "MARK_X",
	2: "MARK_O",
}

var Mark_value = map[string]int32{
	"MARK_UNSPECIFIED": 0,
	"MARK_X":           1,
	"MARK_O":           2,
}

func (x Mark) String() string {
	return proto.EnumName(Mark_name, int32(x))
}

func (Mark) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// The complete set of opcodes used for communication between clients and server.
type OpCode int32

const (
	// No opcode specified. Unused.
	OpCode_OPCODE_UNSPECIFIED OpCode = 0
	// New game round starting.
	OpCode_OPCODE_START OpCode = 1
	// Update to the state of an ongoing round.
	OpCode_OPCODE_UPDATE OpCode = 2
	// A game round has just completed.
	OpCode_OPCODE_DONE OpCode = 3
	// A move the player wishes to make and sends to the server.
	OpCode_OPCODE_MOVE OpCode = 4
	// Move was rejected.
	OpCode_OPCODE_REJECTED OpCode = 5
)

var OpCode_name = map[int32]string{
	0: "OPCODE_UNSPECIFIED",
	1: "OPCODE_START",
	2: "OPCODE_UPDATE",
	3: "OPCODE_DONE",
	4: "OPCODE_MOVE",
	5: "OPCODE_REJECTED",
}

var OpCode_value = map[string]int32{
	"OPCODE_UNSPECIFIED": 0,
	"OPCODE_START":       1,
	"OPCODE_UPDATE":      2,
	"OPCODE_DONE":        3,
	"OPCODE_MOVE":        4,
	"OPCODE_REJECTED":    5,
}

func (x OpCode) String() string {
	return proto.EnumName(OpCode_name, int32(x))
}

func (OpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

// Message data sent by server to clients representing a new game round starting.
type Start struct {
	// The current state of the board.
	Board []Mark `protobuf:"varint,1,rep,packed,name=board,proto3,enum=api.Mark" json:"board,omitempty"`
	// The assignments of the marks to players for this round.
	Marks map[string]Mark `protobuf:"bytes,2,rep,name=marks,proto3" json:"marks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=api.Mark"`
	// Whose turn it is to play.
	Mark Mark `protobuf:"varint,3,opt,name=mark,proto3,enum=api.Mark" json:"mark,omitempty"`
	// The deadline time by which the player must submit their move, or forfeit.
	Deadline             int64    `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Start) Reset()         { *m = Start{} }
func (m *Start) String() string { return proto.CompactTextString(m) }
func (*Start) ProtoMessage()    {}
func (*Start) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Start) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Start.Unmarshal(m, b)
}
func (m *Start) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Start.Marshal(b, m, deterministic)
}
func (m *Start) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Start.Merge(m, src)
}
func (m *Start) XXX_Size() int {
	return xxx_messageInfo_Start.Size(m)
}
func (m *Start) XXX_DiscardUnknown() {
	xxx_messageInfo_Start.DiscardUnknown(m)
}

var xxx_messageInfo_Start proto.InternalMessageInfo

func (m *Start) GetBoard() []Mark {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *Start) GetMarks() map[string]Mark {
	if m != nil {
		return m.Marks
	}
	return nil
}

func (m *Start) GetMark() Mark {
	if m != nil {
		return m.Mark
	}
	return Mark_MARK_UNSPECIFIED
}

func (m *Start) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

// A game state update sent by the server to clients.
type Update struct {
	// The current state of the board.
	Board []Mark `protobuf:"varint,1,rep,packed,name=board,proto3,enum=api.Mark" json:"board,omitempty"`
	// Whose turn it is to play.
	Mark Mark `protobuf:"varint,2,opt,name=mark,proto3,enum=api.Mark" json:"mark,omitempty"`
	// The deadline time by which the player must submit their move, or forfeit.
	Deadline             int64    `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetBoard() []Mark {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *Update) GetMark() Mark {
	if m != nil {
		return m.Mark
	}
	return Mark_MARK_UNSPECIFIED
}

func (m *Update) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

// Complete game round with winner announcement.
type Done struct {
	// The final state of the board.
	Board []Mark `protobuf:"varint,1,rep,packed,name=board,proto3,enum=api.Mark" json:"board,omitempty"`
	// The winner of the game, if any. Unspecified if it's a draw.
	Winner Mark `protobuf:"varint,2,opt,name=winner,proto3,enum=api.Mark" json:"winner,omitempty"`
	// Winner board positions, if any. Used to display the row, column, or diagonal that won the game.
	// May be empty if it's a draw or the winner is by forfeit.
	WinnerPositions []int32 `protobuf:"varint,3,rep,packed,name=winner_positions,json=winnerPositions,proto3" json:"winner_positions,omitempty"`
	// Next round start time.
	NextGameStart        int64    `protobuf:"varint,4,opt,name=next_game_start,json=nextGameStart,proto3" json:"next_game_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Done) Reset()         { *m = Done{} }
func (m *Done) String() string { return proto.CompactTextString(m) }
func (*Done) ProtoMessage()    {}
func (*Done) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Done) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Done.Unmarshal(m, b)
}
func (m *Done) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Done.Marshal(b, m, deterministic)
}
func (m *Done) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Done.Merge(m, src)
}
func (m *Done) XXX_Size() int {
	return xxx_messageInfo_Done.Size(m)
}
func (m *Done) XXX_DiscardUnknown() {
	xxx_messageInfo_Done.DiscardUnknown(m)
}

var xxx_messageInfo_Done proto.InternalMessageInfo

func (m *Done) GetBoard() []Mark {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *Done) GetWinner() Mark {
	if m != nil {
		return m.Winner
	}
	return Mark_MARK_UNSPECIFIED
}

func (m *Done) GetWinnerPositions() []int32 {
	if m != nil {
		return m.WinnerPositions
	}
	return nil
}

func (m *Done) GetNextGameStart() int64 {
	if m != nil {
		return m.NextGameStart
	}
	return 0
}

// A player intends to make a move.
type Move struct {
	// The position the player wants to place their mark in.
	Position             int32    `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Move) Reset()         { *m = Move{} }
func (m *Move) String() string { return proto.CompactTextString(m) }
func (*Move) ProtoMessage()    {}
func (*Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Move) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Move.Unmarshal(m, b)
}
func (m *Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Move.Marshal(b, m, deterministic)
}
func (m *Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Move.Merge(m, src)
}
func (m *Move) XXX_Size() int {
	return xxx_messageInfo_Move.Size(m)
}
func (m *Move) XXX_DiscardUnknown() {
	xxx_messageInfo_Move.DiscardUnknown(m)
}

var xxx_messageInfo_Move proto.InternalMessageInfo

func (m *Move) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// Payload for an RPC request to find a match.
type RpcFindMatchRequest struct {
	// User can choose a fast or normal speed match.
	Fast                 bool     `protobuf:"varint,1,opt,name=fast,proto3" json:"fast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcFindMatchRequest) Reset()         { *m = RpcFindMatchRequest{} }
func (m *RpcFindMatchRequest) String() string { return proto.CompactTextString(m) }
func (*RpcFindMatchRequest) ProtoMessage()    {}
func (*RpcFindMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *RpcFindMatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcFindMatchRequest.Unmarshal(m, b)
}
func (m *RpcFindMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcFindMatchRequest.Marshal(b, m, deterministic)
}
func (m *RpcFindMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcFindMatchRequest.Merge(m, src)
}
func (m *RpcFindMatchRequest) XXX_Size() int {
	return xxx_messageInfo_RpcFindMatchRequest.Size(m)
}
func (m *RpcFindMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcFindMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RpcFindMatchRequest proto.InternalMessageInfo

func (m *RpcFindMatchRequest) GetFast() bool {
	if m != nil {
		return m.Fast
	}
	return false
}

// Payload for an RPC response containing match IDs the user can join.
type RpcFindMatchResponse struct {
	// One or more matches that fit the user's request.
	MatchIds             []string `protobuf:"bytes,1,rep,name=match_ids,json=matchIds,proto3" json:"match_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcFindMatchResponse) Reset()         { *m = RpcFindMatchResponse{} }
func (m *RpcFindMatchResponse) String() string { return proto.CompactTextString(m) }
func (*RpcFindMatchResponse) ProtoMessage()    {}
func (*RpcFindMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *RpcFindMatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcFindMatchResponse.Unmarshal(m, b)
}
func (m *RpcFindMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcFindMatchResponse.Marshal(b, m, deterministic)
}
func (m *RpcFindMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcFindMatchResponse.Merge(m, src)
}
func (m *RpcFindMatchResponse) XXX_Size() int {
	return xxx_messageInfo_RpcFindMatchResponse.Size(m)
}
func (m *RpcFindMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcFindMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RpcFindMatchResponse proto.InternalMessageInfo

func (m *RpcFindMatchResponse) GetMatchIds() []string {
	if m != nil {
		return m.MatchIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.Mark", Mark_name, Mark_value)
	proto.RegisterEnum("api.OpCode", OpCode_name, OpCode_value)
	proto.RegisterType((*Start)(nil), "api.Start")
	proto.RegisterMapType((map[string]Mark)(nil), "api.Start.MarksEntry")
	proto.RegisterType((*Update)(nil), "api.Update")
	proto.RegisterType((*Done)(nil), "api.Done")
	proto.RegisterType((*Move)(nil), "api.Move")
	proto.RegisterType((*RpcFindMatchRequest)(nil), "api.RpcFindMatchRequest")
	proto.RegisterType((*RpcFindMatchResponse)(nil), "api.RpcFindMatchResponse")
}

func init() {
	proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c)
}

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xc9, 0xbf, 0x6a, 0x3d, 0x63, 0xd4, 0x78, 0x03, 0x45, 0x43, 0x88, 0x90, 0x0b, 0xd4,
	0x0d, 0xad, 0x15, 0x2b, 0x17, 0x88, 0xbb, 0xd2, 0x64, 0xa8, 0xa0, 0x2e, 0x95, 0xdb, 0x21, 0xc4,
	0x4d, 0xe5, 0x36, 0x66, 0x35, 0x6d, 0x62, 0x13, 0xbb, 0x83, 0x49, 0xbc, 0x0a, 0x8f, 0xc5, 0xfb,
	0xa0, 0xb8, 0x7f, 0xa0, 0xe3, 0x62, 0xdc, 0x7d, 0xfe, 0xe5, 0xf3, 0xf1, 0x77, 0xce, 0x51, 0xa0,
	0x4a, 0x25, 0x6f, 0xc8, 0x42, 0x68, 0x81, 0x1d, 0x2a, 0x79, 0xf8, 0xcb, 0x02, 0x6f, 0xa0, 0x69,
	0xa1, 0xf1, 0x13, 0xf0, 0xc6, 0x82, 0x16, 0xa9, 0x6f, 0x05, 0x4e, 0xfd, 0xde, 0x69, 0xb5, 0x51,
	0x3a, 0x7b, 0xb4, 0x98, 0x91, 0x25, 0xc7, 0xcf, 0xc1, 0xcb, 0x68, 0x31, 0x53, 0xbe, 0x1d, 0x38,
	0xf5, 0xdd, 0xd3, 0x07, 0xc6, 0x60, 0xee, 0x1a, 0x9b, 0x8a, 0x73, 0x5d, 0x5c, 0x93, 0xa5, 0x07,
	0x3f, 0x06, 0xb7, 0x14, 0xbe, 0x13, 0x58, 0xdb, 0xc5, 0x0c, 0xc6, 0x87, 0xb0, 0x93, 0x32, 0x9a,
	0xce, 0x79, 0xce, 0x7c, 0x37, 0xb0, 0xea, 0x0e, 0xd9, 0x9c, 0x0f, 0x3b, 0x00, 0x7f, 0xea, 0x61,
	0x04, 0xce, 0x8c, 0x5d, 0xfb, 0x56, 0x60, 0xd5, 0xab, 0xa4, 0x94, 0x65, 0xd0, 0x2b, 0x3a, 0x5f,
	0x30, 0xdf, 0xbe, 0x59, 0x7b, 0xc9, 0x5f, 0xdb, 0xaf, 0xac, 0x30, 0x85, 0xca, 0x85, 0x4c, 0xa9,
	0x66, 0xb7, 0xf7, 0xb5, 0x8e, 0x6a, 0xdf, 0x1e, 0xd5, 0xd9, 0x8e, 0x1a, 0xfe, 0xb4, 0xc0, 0x8d,
	0x44, 0xfe, 0x1f, 0x8f, 0x3c, 0x85, 0xca, 0x37, 0x9e, 0xe7, 0xac, 0xf8, 0xf7, 0x99, 0xd5, 0x07,
	0x7c, 0x04, 0x68, 0xa9, 0x46, 0x52, 0x28, 0xae, 0xb9, 0xc8, 0x95, 0xef, 0x04, 0x4e, 0xdd, 0x23,
	0xb5, 0x25, 0xef, 0xaf, 0x31, 0x7e, 0x06, 0xb5, 0x9c, 0x7d, 0xd7, 0xa3, 0x4b, 0x9a, 0xb1, 0x91,
	0x2a, 0x57, 0xb0, 0x9a, 0xe2, 0x5e, 0x89, 0xdf, 0xd2, 0x8c, 0x99, 0xbd, 0x84, 0x21, 0xb8, 0x3d,
	0x71, 0xc5, 0xca, 0x1e, 0xd6, 0x35, 0xcd, 0x24, 0x3d, 0xb2, 0x39, 0x87, 0x47, 0xb0, 0x4f, 0xe4,
	0xe4, 0x8c, 0xe7, 0x69, 0x8f, 0xea, 0xc9, 0x94, 0xb0, 0xaf, 0x0b, 0xa6, 0x34, 0xc6, 0xe0, 0x7e,
	0xa6, 0x4a, 0x1b, 0xfb, 0x0e, 0x31, 0x3a, 0x6c, 0xc1, 0xc1, 0xb6, 0x55, 0x49, 0x91, 0x2b, 0x86,
	0x1f, 0x41, 0x35, 0x2b, 0xc1, 0x88, 0xa7, 0xca, 0x4c, 0xa0, 0x4a, 0x76, 0x0c, 0xe8, 0xa6, 0xea,
	0xf8, 0x25, 0xb8, 0x65, 0x9b, 0xf8, 0x00, 0x50, 0xaf, 0x4d, 0xde, 0x8f, 0x2e, 0xce, 0x07, 0xfd,
	0xb8, 0xd3, 0x3d, 0xeb, 0xc6, 0x11, 0xba, 0x83, 0x01, 0x2a, 0x86, 0x7e, 0x44, 0xd6, 0x46, 0x27,
	0xc8, 0x3e, 0xfe, 0x01, 0x95, 0x44, 0x76, 0x44, 0xca, 0xf0, 0x43, 0xc0, 0x49, 0xbf, 0x93, 0x44,
	0xf1, 0x8d, 0x9b, 0x08, 0xee, 0xae, 0xf8, 0x60, 0xd8, 0x26, 0x43, 0x64, 0xe1, 0xfb, 0xb0, 0xb7,
	0x76, 0xf6, 0xa3, 0xf6, 0x30, 0x46, 0x36, 0xae, 0xc1, 0xee, 0x0a, 0x45, 0xc9, 0x79, 0x8c, 0x9c,
	0xbf, 0x40, 0x2f, 0xf9, 0x10, 0x23, 0x17, 0xef, 0x43, 0x6d, 0x05, 0x48, 0xfc, 0x2e, 0xee, 0x0c,
	0xe3, 0x08, 0x79, 0x6f, 0x5a, 0x9f, 0x5e, 0x5c, 0x72, 0x3d, 0x5d, 0x8c, 0x1b, 0x13, 0x91, 0x35,
	0xa7, 0xac, 0x10, 0x7c, 0x32, 0xa7, 0x63, 0xd5, 0xcc, 0xe9, 0x8c, 0x66, 0xf4, 0x44, 0x16, 0xe2,
	0x0b, 0x9b, 0xe8, 0x13, 0xcd, 0x32, 0x39, 0xa7, 0x9a, 0x35, 0xa9, 0xe4, 0xe3, 0x8a, 0xf9, 0xad,
	0x5a, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x86, 0xee, 0x7d, 0x39, 0x63, 0x03, 0x00, 0x00,
}
